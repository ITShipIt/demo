AWSTemplateFormatVersion: 2010-09-09

Description: Cameron's Testing Stack - SpotFleet

Mappings:

  CidrMappings:

    public-subnet:
      CIDR: 192.168.1.0/24
    vpc:
      CIDR: 192.168.0.0/16

  RegionMap: #list of the amazon linux 2 images for each region, imageId is selected based on where the stack is created.
    us-east-1: # N.Virgina
      AMI: ami-02da3a138888ced85
    us-east-2: # Ohio
      AMI: ami-0de7daa7385332688
    us-west-1: # N.California
      AMI: ami-09bfcadb25ee95bec
    us-west-2: #Oregon
      AMI: ami-095cd038eef3e5074
    ap-south-1: # Mumbai
      AMI: ami-03103e7ded4c02ef8
    ap-northeast-1: #Tokyo
      AMI: ami-097473abce069b8e9
    ap-northeast-2: #Seoul
      AMI: ami-045e355a6004a67c4
    ap-southeast-1: #Singapore
      AMI: ami-00158b185c8cc09dc
    ap-southeast-2: #Sydney
      AMI: ami-0c3228fd049cdb151
    eu-central-1: #Frankfurt
      AMI: ami-07f1fbbff759e24dd
    eu-west-1: #Ireland
      AMI: ami-02a39bdb8e8ee056a
    eu-west-2: #London
      AMI: ami-07a5200f3fa9c33d3
    eu-west-3: #Paris
      AMI: Paris - ami-0e9073d7ac75f4491
    eu-north-1: #Stockholm
      AMI: ami-244ac35a
    sa-east-1: # SÃ£o Paulo
      AMI: ami-095a33e72f6bb89c3

Parameters:

  JAdmin:
    Type: String
    Description: User name that will be used for the Jenkins Admin user.
    Default: admin

  JAdminPass:
    Type: String
    Description: Password used for the created admin password.
    NoEcho: True

  SlackTeamDomain:
    Type: String
    Description: Domain name from slack application
  
  SlackGlobalChannel:
    Type: String
    Description: Default channel to send slack messages to

  SlackGlobalToken:
    Type: String
    Description: Integration token from slack application
    NoEcho: True

  securityKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Encryption keypair to use with created EC2 instances

  jenkinsAdditionalPlugins:
    Type: String

  spotInstanceType:
    Type: String
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    Default: t3.micro
    Description: EC2 instance type to use for the spot fleet

  spotBidPrice:
    Type: Number
    Description: The maximum price to bid on spot instances for the spot fleet request
    Default: 0.001

  spotTargetCapacity:
    Type: Number
    Description: The target capacity of the spot fleet request.
    Default: 2

Resources:

  awsFleetManager: #This is the IAM role that aws will use to manage and request spot instances for the project by aws.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: 
            Service:
            - spotfleet.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole #This will set all the needed permission specific for the spot fleet role
      Path: /

  jenkinsAWSUser:
    Type: AWS::IAM::User
    Properties: 
      UserName: Jenkins
      Policies:
      - PolicyName: JenkinsSpotFleetManager
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            Resource: '*'

  jenkinsAccessKey:
    DependsOn:
    - jenkinsAWSUser
    Type: AWS::IAM::AccessKey
    Properties: 
      Status: Active
      UserName: 
        Ref: jenkinsAWSUser

  vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - vpc
        - CIDR
      EnableDnsHostnames: True
      EnableDnsSupport: True

  internetGateway:
    DependsOn:
    - vpc
    Type: AWS::EC2::InternetGateway

  attachGateway:
    DependsOn:
      - vpc
      - internetGateway
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: internetGateway
      VpcId:
        Ref: vpc

  publicRouteTable:
    DependsOn:
    - vpc
    - attachGateway
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: vpc

  publicRoute:
    DependsOn:
    - publicRouteTable
    - internetGateway
    - attachGateway
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: internetGateway
      RouteTableId:
        Ref: publicRouteTable

  publicSubnet:
    DependsOn:
    - attachGateway
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet
        - CIDR
      VpcId:
        Ref: vpc
      AvailabilityZone: 
        Fn::Select: 
        - 0
        - Fn::GetAZs: ""
      MapPublicIpOnLaunch: True

  publicSubnetRouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet
    - attachGateway
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet

  capstoneSG:
    DependsOn:
    - vpc
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Basic SecurityGroup for the capstone project
      VpcId:
        Ref: vpc
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0 #Allow SSH
        Description: It works
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - CidrIp: 0.0.0.0/0 #Allow Jenkins on port 8080
        Description: It works
        FromPort: 8080
        IpProtocol: tcp
        ToPort: 8080
      - CidrIp: 0.0.0.0/0 #Port used for a basic Flask Page, old and will be eventually removed
        Description: It works
        FromPort: 4000
        IpProtocol: tcp
        ToPort: 4000

  capstoneJenkinsMaster:
    DependsOn: 
    - capstoneSG
    - publicSubnet
    - jenkinsAccessKey
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          cli:
          - jenkinsCliInstall
          - jenkinsPluginConfiguration
        jenkinsCliInstall: #This will install jenkins through the cli using an rpm
          packages:
            yum:
              java-1.8.0-openjdk: []
          files:
            /var/lib/jenkins/init.groovy.d/adminmk.groovy:
              content: !Sub |
                #!groovy
                import jenkins.model.*
                import hudson.security.*
                import jenkins.install.InstallState

                def instance = Jenkins.getInstance()

                println "--> creating security realm"
                def hudsonRealm = new HudsonPrivateSecurityRealm(false)
                instance.setSecurityRealm(hudsonRealm)

                println "--> creating local user '${JAdmin}'"
                // Create user with custom pass
                def user = instance.getSecurityRealm().createAccount('${JAdmin}', '${JAdminPass}')
                user.save()

                def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
                strategy.setAllowAnonymousRead(false)
                instance.setAuthorizationStrategy(strategy)

                if (!instance.installState.isSetupComplete()) {
                  println '--> Neutering SetupWizard'
                  InstallState.INITIAL_SETUP_COMPLETED.initializeState()
                }

                instance.save()
            /var/lib/jenkins/init.groovy.d/secureJenkins.groovy:
              content: !Sub |
                import jenkins.security.s2m.AdminWhitelistRule
                import hudson.security.csrf.DefaultCrumbIssuer
                import jenkins.model.Jenkins

                //Enable agent to master security
                Jenkins.instance.getInjector().getInstance(AdminWhitelistRule.class)
                .setMasterKillSwitch(false)

                //Enable CSRF security
                if(!Jenkins.instance.isQuietingDown()) {
                    def j = Jenkins.instance
                    if(j.getCrumbIssuer() == null) {
                        j.setCrumbIssuer(new DefaultCrumbIssuer(true))
                        j.save()
                        println 'CSRF Protection configuration has changed.  Enabled CSRF Protection.'
                    }
                    else {
                        println 'Nothing changed.  CSRF Protection already configured.'
                    }
                }
                else {
                    println "Shutdown mode enabled.  Configure CSRF protection SKIPPED."
                }
            /var/lib/jenkins/init.groovy.d/pluginInstallation.groovy:
              content:
                Fn::Sub:
                - |
                  import jenkins.model.*
                  import java.util.logging.Logger
                  def logger = Logger.getLogger("")
                  def installed = false
                  def initialized = false
                  def pluginParameter="${jenkins_plugins} ${jenkinsAdditionalPlugins}"
                  def plugins = pluginParameter.split()
                  logger.info("" + plugins)
                  def instance = Jenkins.getInstance()
                  def pm = instance.getPluginManager()
                  def uc = instance.getUpdateCenter()
                  plugins.each {
                    logger.info("Checking " + it)
                    if (!pm.getPlugin(it)) {
                      logger.info("Looking UpdateCenter for " + it)
                      if (!initialized) {
                        uc.updateAllSites()
                        initialized = true
                      }
                      def plugin = uc.getPlugin(it)
                      if (plugin) {
                        logger.info("Installing " + it)
                        def installFuture = plugin.deploy()
                        while(!installFuture.isDone()) {
                          logger.info("Waiting for plugin install: " + it)
                          sleep(3000)
                        }
                        installed = true
                      }
                    }
                  }
                  if (installed) {
                    logger.info("Plugins installed, initializing a restart!")
                    instance.save()
                    instance.restart()
                  }
                - {
                  jenkins_plugins: ace-editor ant antisamy-markup-formatter apache-httpcomponents-client-4-api authentication-tokens bouncycastle-api branch-api build-timeout cloudbees-folder command-launcher credentials credentials-binding display-url-api docker-commons docker-workflow durable-task ec2-fleet email-ext git git-client github github-api github-branch-source git-server gradle handlebars jackson2-api jdk-tool jquery-detached jsch junit ldap lockable-resources mailermapdb-api matrix-auth matrix-project momentjs pam-auth pipeline-build-step pipeline-github-lib pipeline-graph-analysis pipeline-input-step pipeline-milestone-step pipeline-model-api pipeline-model-declarative-agent pipeline-model-definition pipeline-model-extensions pipeline-rest-api pipeline-stage-step pipeline-stage-tags-metadata pipeline-stage-view plain-credentials resource-disposer scm-api script-security ssh-credentials ssh-slaves structs subversion timestamper token-macro workflow-aggregator workflow-api workflow-basic-steps workflow-cps workflow-cps-global-lib workflow-durable-task-step workflow-job workflow-multibranch workflow-scm-step workflow-step-api workflow-support ws-cleanup
                  }
          commands: 
            command2.1:
              command: yum update -y
            command2.2:
              command: wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
            command2.3:
              command: rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
            command2.4:
              command: yum install jenkins -y
            command2.5:
              command: service jenkins start
            command2.7:
              command: sed -i 's/JENKINS_JAVA_OPTIONS="-Djava.awt.headless=true"/JENKINS_JAVA_OPTIONS="-Djenkins.install.runSetupWizard=false -Djava.awt.headless=true"/g' /etc/sysconfig/jenkins
            command2.8: 
              command: service jenkins restart
        jenkinsPluginConfiguration:
          files:
            /var/lib/jenkins/init.groovy.d/slaveFactory.groovy:
              content: 
                Fn::Sub: 
                - |
                  import com.cloudbees.jenkins.plugins.awscredentials.AWSCredentialsImpl
                  import com.cloudbees.plugins.credentials.*
                  import com.cloudbees.plugins.credentials.domains.Domain

                  def AWSCredentialsImplParameters = [
                    id:           'jenkins-aws-key',
                    description:  'Jenkins AWS IAM key',
                    accessKey:    '${jenkinsAWSKey}',
                    secretKey:    '${jenkinsSecretKey}'
                  ]

                  // https://github.com/jenkinsci/aws-credentials-plugin/blob/aws-credentials-1.23/src/main/java/com/cloudbees/jenkins/plugins/awscredentials/AWSCredentialsImpl.java
                  AWSCredentialsImpl aWSCredentialsImpl = new AWSCredentialsImpl(
                    CredentialsScope.GLOBAL,
                    AWSCredentialsImplParameters.id,
                    AWSCredentialsImplParameters.accessKey,
                    AWSCredentialsImplParameters.secretKey,
                    AWSCredentialsImplParameters.description
                  )

                  // get Jenkins instance
                  Jenkins jenkins = Jenkins.getInstance()
                   
                  // get credentials domain
                  def domain = Domain.global()
                   
                  // get credentials store
                  def store = jenkins.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()
                   
                  // add credential to store
                  store.addCredentials(domain, aWSCredentialsImpl)

                  // save current Jenkins state to disk
                  jenkins.save()
                - {
                  jenkinsAWSKey: !Ref jenkinsAccessKey,
                  jenkinsSecretKey: !GetAtt [jenkinsAccessKey, SecretAccessKey],
                  whatsMyAz: !Select [0, !GetAZs ""],
                  regionAMI: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
                  }
            /var/lib/jenkins/init.groovy.d/slackSettings.groovy:
              content: !Sub |
                import jenkins.model.Jenkins
                import com.cloudbees.plugins.credentials.domains.Domain
                import org.jenkinsci.plugins.plaincredentials.impl.*
                import hudson.util.Secret
                import com.cloudbees.plugins.credentials.CredentialsScope

                def jenkins = Jenkins.getInstance()

                def domain = Domain.global()
                def store = jenkins.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

                def slackCredentialParameters = [
                  description:  'Slack Jenkins integration token1',
                  id:           'slack-token',
                  secret:       '${SlackGlobalToken}'
                ]

                def secretText = new StringCredentialsImpl(
                  CredentialsScope.GLOBAL,
                  slackCredentialParameters.id,
                  slackCredentialParameters.description,
                  Secret.fromString(slackCredentialParameters.secret)
                )
                  
                store.addCredentials(domain, secretText)

                def slack = jenkins.getDescriptorByType(jenkins.plugins.slack.SlackNotifier.DescriptorImpl.class)
                // slack.setBaseUrl - only needed for slack compatible applications e.g. Mattermost
                slack.setTeamDomain('${SlackTeamDomain}')
                slack.setTokenCredentialId(slackCredentialParameters.id)
                slack.setBotUser(false)
                slack.setRoom('${SlackGlobalChannel}')

                slack.save()
                jenkins.save()
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      KeyName:
        Ref: securityKeyPair
      SecurityGroupIds:
      - Ref: capstoneSG
      SubnetId:
        Ref: publicSubnet
      UserData: #the following script calls the cfn-init helper function to run the commands the the instance metadata using a preconfigured set of commands.
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            #Install the files and packages from the Metadata
            /opt/aws/bin/cfn-init --verbose --stack ${AWS::StackName} --resource capstoneJenkinsMaster --region ${AWS::Region} --configset cli
            #/opt/aws/bin/cfn-signal --exit-code $? --stack ${AWS::StackName} --resource capstoneJenkinsMaster --region ${AWS::Region}

  capstoneSpotFleet:
    DependsOn:
    - awsFleetManager
    - capstoneSG
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole:
          Fn::GetAtt:
          - awsFleetManager
          - Arn
        AllocationStrategy: lowestPrice
        InstanceInterruptionBehavior: stop
        LaunchSpecifications:
        - ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
          InstanceType: 
            Ref: spotInstanceType
          KeyName:
            Ref: securityKeyPair
          Monitoring:
            Enabled: True
          SecurityGroups:
          - GroupId:
              Ref: capstoneSG
          SubnetId:
            Ref: publicSubnet
          SpotPrice: 
            Ref: spotBidPrice
          WeightedCapacity: 1
        TargetCapacity:
          Ref: spotTargetCapacity
    
