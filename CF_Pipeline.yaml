AWSTemplateFormatVersion: 2010-09-09
Description: Cameron's Testing Stack - SpotFleet
Parameters:
  securityKeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Encryption keypair to use with created EC2 instances
  spotInstanceType:
    Type: String
    AllowedValues:
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    Default: t3.micro
    Description: EC2 instance type to use for the spot fleet
  spotBidPrice:
    Type: Number
    Description: The maximum price to bid on spot instances for the spot fleet request
Resources:
  spotFleetManager: #This is the IAM role that aws will use to manage and request spot instances for the project.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service: 
                - spotfleet.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole #This will set all the needed permission specific for the spot fleet role
      Path: /
  capstoneSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Basic SecurityGroup for the capstone project
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0 #Allow SSH
          Description: It works
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0 #Allow Jenkins on port 8080
          Description: It works
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
        - CidrIp: 0.0.0.0/0 #Port used for a basic Flask Page
          Description: It works
          FromPort: 4000
          IpProtocol: tcp
          ToPort: 4000
  capstoneJenkinsMaster:
    DependsOn: 
      - capstoneSG
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands: #hopefully this will install jenkins for us on the created instance.
            test:
              command: wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
              command: sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
              command: sudo apt-get update
              command: sudo apt-get install jenkins
              ignoreErrors: false
    Properties:
      ImageId: ami-0799ad445b5727125
      InstanceType: t2.micro
      KeyName:
        Ref: securityKeyPair
      SecurityGroups:
        - Ref: capstoneSG
  capstoneSpotFleet:
    DependsOn:
      - spotFleetManager
      - capstoneSG
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        IamFleetRole:
          Fn::GetAtt:
            - spotFleetManager
            - Arn
        AllocationStrategy: lowestPrice
        InstanceInterruptionBehavior: stop
        LaunchSpecifications:
          - ImageId: ami-0799ad445b5727125 
            InstanceType: 
              Ref: spotInstanceType
            KeyName:
              Ref: securityKeyPair
            Monitoring:
              Enabled: True
            SecurityGroups:
              - GroupId:
                  Ref: capstoneSG
            SpotPrice: 
              Ref: spotBidPrice
            WeightedCapacity: 1
        TargetCapacity: 2
    
